Sprint 5 Plan: "The Automation & Expansion Sprint"
Sprint Goal: To deliver three major, high-value features and a foundational automated testing suite by the end of the 10-day sprint. The deliverables are: (1) Full Instagram Integration, (2) Intelligent AI Tagging, (3) Proactive Reminders/Follow-ups, and (4) a Selenium-based E2E Testing Tool.
Week 1: Parallel Development & Foundation Building
(The goal this week is to build the backend and UI for all three new features in parallel and to set up the foundation for the testing tool.)
Day 1-2: Backend Foundation for All Features (Backend Team)
Goal: Build all the necessary database, CRUD, and API endpoints for the three new features.
Tasks:
Instagram Webhook (webhook_router.py): Build the POST /webhook/instagram endpoint, including the full logic for parsing the Instagram payload and normalizing it into our NormalizedMessage object.
Notification Service (notification_service.py): Build the unified send_reply service. Implement the Instagram reply logic using a POST request to the Meta Graph API with the Page Access Token.
Proactive Logic (message_controller.py): Add the logic to create scheduled_tasks records for "APPOINTMENT_REMINDER" on a BOOKING_CONFIRMED intent and "LEAD_FOLLOWUP" on a BOOKING_ABANDONED intent.
AI Tagging DB (models.py & crud_knowledge.py): Create a new ai_interest_tags table (id, keyword, tag_to_apply). Build the CRUD functions and API endpoints for the owner to manage this list of keywords.
Day 1-2: Selenium Tool Setup & First Test (Dedicated Tester/Dev)
Goal: Set up the automated testing project and create the first, most critical test case.
Tasks:
Project Setup: Create a new, separate project folder (e.g., MessagingAgent-Tests). Set up a Python environment with selenium and pytest.
WebDriver Setup: Configure Selenium WebDriver for Chrome.
Login Test: Write the first test script (test_login.py) that can successfully open the browser, navigate to the dashboard login page, enter credentials, and verify a successful login. This is the foundation for all other tests.
Day 3: Backend Integration & AI Prompt Upgrade (Backend Team)
Goal: Connect all the backend pieces and upgrade the AI's intelligence.
Tasks:
Refactor Controller: Fully refactor message_controller.py to use the new notification_service for sending all replies.
Upgrade ai_service.py:
Modify the _get_business_context function to now fetch the list of "interest keywords" from the new ai_interest_tags table.
Inject this list into the system prompt with a new, forceful rule: "You MUST check the user's message against the '## Interest Keywords' list. If a keyword is present, you MUST include the corresponding tag in your JSON output."
Day 4-5: Frontend UI Build for AI Tagging & Proactive Features (Frontend Team)
Goal: Build the user interfaces for the two new management features.
Tasks:
AI Tagging UI: Create a new page, "AI Tagging Rules." Build a simple UI with a form that allows the owner to add, view, and delete keyword-to-tag mappings by calling the new backend endpoints.
Scheduled Messages UI: Create a new page, "Scheduled Outreach." Build a simple table that fetches and displays all tasks from the scheduled_tasks table with a status of "pending". This gives the owner visibility into upcoming reminders and follow-ups.
Day 4-5: Selenium Test Expansion (Dedicated Tester/Dev)
Goal: Automate the testing of the complete "New Customer" journey.
Tasks:
Build WhatsApp Interaction Library: Write helper functions that use the WPPConnect API directly to send a message from a test number and to poll for the latest reply. This is how the test will simulate a user.
Write test_new_customer_flow.py: This script will:
Send a "Hi" message via the helper library.
Poll for the AI's "What's your name?" reply.
Send a name and service request.
Poll for the AI's confirmation reply.
Log in to the dashboard with Selenium, navigate to the Inbox, and assert that the new conversation is present and the contact's name has been correctly updated.
Week 2: Full Integration, Testing Automation, and Review
(The goal this week is to connect the Instagram UI, complete the core test suite, and ensure all four deliverables are stable.)
Day 6-7: End-to-End Instagram Integration (Full Team)
Goal: Connect the fully functional backend to the frontend and test the complete flow.
Tasks:
Full-Stack Test: The team works together to send a DM to the test Instagram account.
VERIFY (Backend): The POST /webhook/instagram is hit, and the message is normalized and processed.
VERIFY (Frontend): The new message appears in the Unified Inbox with an Instagram icon.
VERIFY (Full Loop): The AI's reply is successfully sent back to the user on Instagram. Test the "Human Takeover" feature for an Instagram chat.
Day 8-9: Finalize the Selenium Test Suite (Dedicated Tester/Dev)
Goal: Create automated tests for the most critical business features.
Tasks:
Write test_human_takeover.py: This script will simulate a conversation, then use Selenium to log in, click the "Takeover" button, send a manual reply, and verify the message is received.
Write test_campaign_safety.py: This script will use the backend API to launch a campaign targeting a test user who has had a recent conversation. It will then assert that the API's "Smart Launch" summary correctly reports "eligible_after_safety_check": 0.
Day 9: Final Feature Integration & UI Polish (Frontend Team)
Goal: Ensure all new pages are linked and the UI is clean.
Tasks:
Add the final links for "AI Tagging Rules" and "Scheduled Outreach" to the Sidebar.js.
Review the entire application for any UI inconsistencies and perform a final polish.
Day 10: Full System Demo & Sprint Review
Goal: Demonstrate all four major deliverables.
Demo Plan:
Demo Instagram: Showcase a full conversation happening on Instagram, flowing into the unified inbox and getting an AI reply.
Demo AI Tagging: Show the "AI Tagging Rules" page. Add a new rule (e.g., keyword "bridal" -> tag "interest:bridal"). Start a new conversation on WhatsApp, use the word "bridal," and then show in the Inbox that the "interest:bridal" tag was automatically applied.
Demo Proactive Features: Show a user abandoning a booking. Navigate to the "Scheduled Outreach" page and show the "LEAD_FOLLOWUP" task that was automatically created.
Demo the Automation Tool: Run the pytest command in the terminal. The team will watch as the Selenium browser automatically opens, logs into the dashboard, and runs through the test cases, printing "PASSED" for each one. This is a powerful demonstration of the project's new stability and quality assurance.