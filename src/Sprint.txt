Excellent. That is a perfectly focused and achievable sprint plan.

By prioritizing Architecture (Refactoring), Onboarding (Customer Import), Multi-tenancy (Decoupling Identity), and Expansion (Instagram), you are tackling the most critical structural and growth-oriented features. Deferring the advanced AI tuning is a smart move that ensures we can deliver these foundational pieces with high quality.

Here is the revised, 10-day sprint plan based on your final selected milestones.

Official Sprint 4 Plan: "Architecture, Onboarding & Multi-Channel"

Sprint Goal: To transform the application into a truly scalable, multi-tenant platform by (1) executing a major code refactoring, (2) decoupling the business identity, (3) building a feature to import existing customers, and (4) laying the groundwork for Instagram integration.

Week 1: The Great Separation & Decoupling (Backend Focus)

(The primary goal this week is to refactor the entire backend into a clean, modular architecture and remove all hardcoded business-specific values.)

Day 1: Splitting the Data Logic Layer (Refactoring)

Goal: Break down the monolithic crud.py file into domain-focused modules.

Tasks (Backend Team):

Create the src/crud/ directory and new files (crud_contact.py, crud_campaign.py, etc.).

Carefully move the corresponding SQLAlchemy functions from the old crud.py into these new files.

Begin the tedious but critical task of updating all import statements in the controllers and services that were pointing to the old crud.py.

Verification: Test a key feature (like the Inbox page) to ensure the new crud imports are working correctly.

Day 2: Splitting the Schema & API Layers (Refactoring)

Goal: Break down schemas.py and main.py to complete the refactoring.

Tasks (Backend Team):

Create src/schemas/ and src/routers/ directories.

Split schemas.py into smaller, domain-focused files (contact_schemas.py, etc.). Update all imports.

Move all API endpoint functions from main.py into their respective router files (contact_router.py, etc.), changing @app decorators to @router.

Completely slim down main.py so its main job is to include_router for all the new router files.

Verification: Run the application and use the auto-generated /docs page to confirm that all endpoints are still present and functional.

Day 3: Decoupling Business Identity (Backend)

Goal: Create the database and API foundation for a multi-tenant system.

Tasks (Backend Team):

Database: In models.py, create a new BusinessProfile table with columns for business_name, business_description, etc. For now, it will only have one row.

CRUD/Router: Create new crud/crud_profile.py and routers/profile_router.py files.

Implement the CRUD functions and API endpoints to GET and PUT the business profile data.

Refactor AI Service: In ai_service.py, remove the hardcoded global variables. Modify the analyze_message function so that it now fetches the business name and description from the database via the new CRUD function at the start of every call.

Day 4: Customer Import Backend

Goal: Build the backend functionality to allow a bulk import of existing customers from a file.

Tasks (Backend Team):

Create a new endpoint in a routers/contact_router.py: POST /api/contacts/bulk-import.

The endpoint will accept a list of new contact data (e.g., [{name: "Priya Kumar", contact_id: "91...c.us"}, ...]).

The core logic will loop through this list and use the existing crud.get_or_create_contact function. This is key, as it will intelligently update existing contacts with a proper name or create new ones, preventing duplicates.

Day 5: Week 1 Integration & Testing

Goal: Verify all the new backend architecture and features are stable and working as expected.

Tasks (Full Team):

Backend Verification: Use Postman to thoroughly test all the new and moved endpoints:

Can you still fetch conversations?

Can you GET and PUT the new Business Profile?

Can you successfully POST a list of new customers to the /bulk-import endpoint and see them in the contacts table?

Full Regression Test: Run the Sprint 3 test plan to ensure the refactoring has not introduced any regressions.

Week 2: Frontend Implementation & Instagram Groundwork

(The primary goal this week is to build the UI for the new backend features and complete the administrative setup for Instagram.)

Day 6: Business Profile UI

Goal: Build the user interface for managing the decoupled business identity.

Tasks (Frontend Team):

Create a new page component: frontend/src/pages/BusinessProfilePage.jsx.

Add the route for this new page in App.js and a link in the Sidebar.js.

Build a simple form on this page with fields for "Business Name" and "Business Description".

On page load, use useEffect to GET the current profile from /api/profile and populate the form.

When the user saves the form, make a PUT request to /api/profile with the new data.

Day 7: Customer Import UI

Goal: Build an intuitive UI for the customer import feature.

Tasks (Frontend Team):

Create a new page component: frontend/src/pages/ImportCustomersPage.jsx. Add the route and sidebar link.

The page should have a file input that accepts CSV/Excel files.

Use a frontend library (like papaparse or xlsx) to parse the uploaded file in the browser.

Display a preview of the parsed data in a simple table so the user can verify it.

On a "Confirm Import" button click, send the final JSON array to the POST /api/contacts/bulk-import endpoint.

Day 8: Instagram Integration - Admin & Discussion

Goal: Complete all administrative prerequisites for Instagram and plan the technical implementation.

Tasks:

Admin/Lead: This is a non-coding day focused on process. Navigate the Meta Developer Portal. Create the App, connect the Facebook Page and Instagram Business Account, and request the necessary permissions (instagram_basic, instagram_manage_messages, pages_manage_metadata). Document the App ID, App Secret, and get a Page Access Token.

Full Team (Afternoon):

Technical Discussion: Review the Instagram Messenger API documentation.

Plan the implementation: How will we store the Page Access Token securely? What will the database schema look like for Instagram-specific IDs? How will the normalization layer in the webhook work? This planning session is crucial for a smooth start to the coding in the next sprint.

Day 9: Bug Fixing & UI Polish

Goal: Harden the new features and refine the user experience.

Tasks (Frontend Team):

Thoroughly test the Business Profile and Customer Import pages.

Add loading indicators and handle potential API errors gracefully (e.g., showing a user-friendly error message if a file upload fails).

Review the entire application for any UI inconsistencies or small bugs that have emerged.

Day 10: Final Demo & Sprint Review

Goal: Demonstrate the new architectural stability and the powerful new onboarding features.

Demo Plan:

Showcase the Refactoring (Briefly): Explain how the clean new code structure in the backend will accelerate future development.

Demo the Business Profile: Go to the new page, change the Salon Name from "Luxe Salon" to "Priya's Beauty Hub." Start a new WhatsApp conversation and show that the AI now introduces itself with the new name.

Demo the Customer Import: Upload a sample CSV of 3-4 customers. Show the preview table in the UI. Click import and then navigate to the Inbox page to show that the new contacts are now available.

Discuss Instagram: Present the successful setup in the Meta Developer Portal and outline the clear plan for the technical implementation in Sprint 5.

Sprint 4 Deliverable: A refactored, stable, multi-tenant-ready application with a critical customer onboarding feature, and a clear path forward for Instagram integration.
